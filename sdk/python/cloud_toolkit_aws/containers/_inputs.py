# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from .. import kubernetes
from ._enums import *

__all__ = [
    'ContainersClusterNodeGroupArgsArgs',
]

@pulumi.input_type
class ContainersClusterNodeGroupArgsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 instance_type: Optional[pulumi.Input[str]] = None,
                 max_count: Optional[pulumi.Input[float]] = None,
                 min_count: Optional[pulumi.Input[float]] = None,
                 subnets_type: Optional[pulumi.Input['_kubernetes.ClusterSubnetsType']] = None):
        """
        :param pulumi.Input[str] name: The Node Group name.
        :param pulumi.Input[str] instance_type: The EC2 Instance Type to be used to create the Nodes.
        :param pulumi.Input[float] max_count: The maxium number of nodes running in the node group. Defaults to 2.
        :param pulumi.Input[float] min_count: The minimum number of nodes running in the node group. Defaults to 1.
        :param pulumi.Input['_kubernetes.ClusterSubnetsType'] subnets_type: The subnets type to be used to deploy the Node Groups.
        """
        pulumi.set(__self__, "name", name)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if max_count is not None:
            pulumi.set(__self__, "max_count", max_count)
        if min_count is not None:
            pulumi.set(__self__, "min_count", min_count)
        if subnets_type is not None:
            pulumi.set(__self__, "subnets_type", subnets_type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The Node Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The EC2 Instance Type to be used to create the Nodes.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="maxCount")
    def max_count(self) -> Optional[pulumi.Input[float]]:
        """
        The maxium number of nodes running in the node group. Defaults to 2.
        """
        return pulumi.get(self, "max_count")

    @max_count.setter
    def max_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_count", value)

    @property
    @pulumi.getter(name="minCount")
    def min_count(self) -> Optional[pulumi.Input[float]]:
        """
        The minimum number of nodes running in the node group. Defaults to 1.
        """
        return pulumi.get(self, "min_count")

    @min_count.setter
    def min_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min_count", value)

    @property
    @pulumi.getter(name="subnetsType")
    def subnets_type(self) -> Optional[pulumi.Input['_kubernetes.ClusterSubnetsType']]:
        """
        The subnets type to be used to deploy the Node Groups.
        """
        return pulumi.get(self, "subnets_type")

    @subnets_type.setter
    def subnets_type(self, value: Optional[pulumi.Input['_kubernetes.ClusterSubnetsType']]):
        pulumi.set(self, "subnets_type", value)


