# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from .. import kubernetes
from ._inputs import *
import pulumi_aws

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 node_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ContainersClusterNodeGroupArgsArgs']]]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[Sequence[pulumi.Input['ContainersClusterNodeGroupArgsArgs']]] node_groups: The NodeGroups to be assigned to this cluster.
        """
        if node_groups is not None:
            pulumi.set(__self__, "node_groups", node_groups)

    @property
    @pulumi.getter(name="nodeGroups")
    def node_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainersClusterNodeGroupArgsArgs']]]]:
        """
        The NodeGroups to be assigned to this cluster.
        """
        return pulumi.get(self, "node_groups")

    @node_groups.setter
    def node_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainersClusterNodeGroupArgsArgs']]]]):
        pulumi.set(self, "node_groups", value)


class Cluster(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 node_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainersClusterNodeGroupArgsArgs']]]]] = None,
                 __props__=None):
        """
        Cluster is a component that deploy the Cluster application in the cluster.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainersClusterNodeGroupArgsArgs']]]] node_groups: The NodeGroups to be assigned to this cluster.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ClusterArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Cluster is a component that deploy the Cluster application in the cluster.

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 node_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainersClusterNodeGroupArgsArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            __props__.__dict__["node_groups"] = node_groups
            __props__.__dict__["ecs_capacity_providers"] = None
            __props__.__dict__["ecs_cluster"] = None
            __props__.__dict__["service_role"] = None
            __props__.__dict__["service_role_policy_attachments"] = None
        super(Cluster, __self__).__init__(
            'cloud-toolkit-aws:containers:Cluster',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="ecsCapacityProviders")
    def ecs_capacity_providers(self) -> pulumi.Output['pulumi_aws.ecs.ClusterCapacityProviders']:
        return pulumi.get(self, "ecs_capacity_providers")

    @property
    @pulumi.getter(name="ecsCluster")
    def ecs_cluster(self) -> pulumi.Output['pulumi_aws.ecs.Cluster']:
        return pulumi.get(self, "ecs_cluster")

    @property
    @pulumi.getter(name="nodeGroups")
    def node_groups(self) -> pulumi.Output[Sequence[Any]]:
        return pulumi.get(self, "node_groups")

    @property
    @pulumi.getter(name="serviceRole")
    def service_role(self) -> pulumi.Output['pulumi_aws.iam.Role']:
        return pulumi.get(self, "service_role")

    @property
    @pulumi.getter(name="serviceRolePolicyAttachments")
    def service_role_policy_attachments(self) -> pulumi.Output[Sequence['pulumi_aws.iam.RolePolicyAttachment']]:
        return pulumi.get(self, "service_role_policy_attachments")

