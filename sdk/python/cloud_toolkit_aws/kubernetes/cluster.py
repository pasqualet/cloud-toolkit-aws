# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from .. import containers as _containers
from ._enums import *
import pulumi_aws
import pulumi_kubernetes

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 node_groups: Optional[pulumi.Input[Sequence[pulumi.Input['_containers.ContainersClusterNodeGroupArgsArgs']]]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[Sequence[pulumi.Input['_containers.ContainersClusterNodeGroupArgsArgs']]] node_groups: The NodeGroups to be assigned to this cluster.
        """
        if node_groups is not None:
            pulumi.set(__self__, "node_groups", node_groups)

    @property
    @pulumi.getter(name="nodeGroups")
    def node_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_containers.ContainersClusterNodeGroupArgsArgs']]]]:
        """
        The NodeGroups to be assigned to this cluster.
        """
        return pulumi.get(self, "node_groups")

    @node_groups.setter
    def node_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_containers.ContainersClusterNodeGroupArgsArgs']]]]):
        pulumi.set(self, "node_groups", value)


class Cluster(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 node_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['_containers.ContainersClusterNodeGroupArgsArgs']]]]] = None,
                 __props__=None):
        """
        Cluster is a component that deploys a production-ready Kubernetes cluster. It setups the AWS IAM and netwokring, as well many Kubernetes services to run application in production.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['_containers.ContainersClusterNodeGroupArgsArgs']]]] node_groups: The NodeGroups to be assigned to this cluster.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ClusterArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Cluster is a component that deploys a production-ready Kubernetes cluster. It setups the AWS IAM and netwokring, as well many Kubernetes services to run application in production.

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 node_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['_containers.ContainersClusterNodeGroupArgsArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            __props__.__dict__["node_groups"] = node_groups
            __props__.__dict__["cluster"] = None
            __props__.__dict__["cluster_addons"] = None
            __props__.__dict__["cni_chart"] = None
            __props__.__dict__["default_oidc_provider"] = None
            __props__.__dict__["domain"] = None
            __props__.__dict__["kubeconfig"] = None
            __props__.__dict__["provider"] = None
            __props__.__dict__["provisioner_provider"] = None
            __props__.__dict__["provisioner_role"] = None
            __props__.__dict__["provisioner_role_policy"] = None
            __props__.__dict__["role"] = None
            __props__.__dict__["role_policy_attachment"] = None
            __props__.__dict__["security_group"] = None
            __props__.__dict__["subnet_tags"] = None
        super(Cluster, __self__).__init__(
            'cloud-toolkit-aws:kubernetes:Cluster',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def cluster(self) -> pulumi.Output['pulumi_aws.eks.Cluster']:
        """
        The EKS Cluster.
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter(name="clusterAddons")
    def cluster_addons(self) -> pulumi.Output[Optional[Any]]:
        """
        The VPC CNI Chart installed in the cluster.
        """
        return pulumi.get(self, "cluster_addons")

    @property
    @pulumi.getter(name="cniChart")
    def cni_chart(self) -> pulumi.Output['pulumi_kubernetes.helm.v3.Release']:
        """
        The VPC CNI Chart installed in the cluster.
        """
        return pulumi.get(self, "cni_chart")

    @property
    @pulumi.getter(name="defaultOidcProvider")
    def default_oidc_provider(self) -> pulumi.Output[Optional['pulumi_aws.iam.OpenIdConnectProvider']]:
        """
        The default OIDC Provider.
        """
        return pulumi.get(self, "default_oidc_provider")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        The VPC CNI Chart installed in the cluster.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def kubeconfig(self) -> pulumi.Output[str]:
        """
        The kubeconfig content for this cluster.
        """
        return pulumi.get(self, "kubeconfig")

    @property
    @pulumi.getter(name="nodeGroups")
    def node_groups(self) -> pulumi.Output[Sequence[Any]]:
        """
        The Node Groups associated to the cluster.
        """
        return pulumi.get(self, "node_groups")

    @property
    @pulumi.getter
    def provider(self) -> pulumi.Output['pulumi_kubernetes.Provider']:
        """
        The Kubernetes provider for this cluster.
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="provisionerProvider")
    def provisioner_provider(self) -> pulumi.Output['pulumi_aws.Provider']:
        """
        The Provider to provision EKS cluster.
        """
        return pulumi.get(self, "provisioner_provider")

    @property
    @pulumi.getter(name="provisionerRole")
    def provisioner_role(self) -> pulumi.Output['pulumi_aws.iam.Role']:
        """
        The IAM Role to provision EKS cluster.
        """
        return pulumi.get(self, "provisioner_role")

    @property
    @pulumi.getter(name="provisionerRolePolicy")
    def provisioner_role_policy(self) -> pulumi.Output['pulumi_aws.iam.RolePolicy']:
        """
        The IAM Role Polity to provision EKS cluster.
        """
        return pulumi.get(self, "provisioner_role_policy")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output['pulumi_aws.iam.Role']:
        """
        The IAM Role assumed by the EKS Cluster.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="rolePolicyAttachment")
    def role_policy_attachment(self) -> pulumi.Output['pulumi_aws.iam.RolePolicyAttachment']:
        """
        The IAM Role Policy Attachment to assign the IAM Policies to the IAM Role.
        """
        return pulumi.get(self, "role_policy_attachment")

    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> pulumi.Output['pulumi_aws.ec2.SecurityGroup']:
        """
        The Security Group associated to the EKS Cluster.
        """
        return pulumi.get(self, "security_group")

    @property
    @pulumi.getter(name="subnetTags")
    def subnet_tags(self) -> pulumi.Output[Sequence['pulumi_aws.ec2.Tag']]:
        """
        EC2 Tags used for provisioning Load Balancers.
        """
        return pulumi.get(self, "subnet_tags")

