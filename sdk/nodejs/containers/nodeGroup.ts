// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import * as pulumiAws from "@pulumi/aws";

/**
 * NodeGroup is a component that deploy the NodeGroup application in the cluster.
 */
export class NodeGroup extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'cloud-toolkit-aws:containers:NodeGroup';

    /**
     * Returns true if the given object is an instance of NodeGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodeGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodeGroup.__pulumiType;
    }

    public /*out*/ readonly autoscalingGroup!: pulumi.Output<pulumiAws.autoscaling.Group>;
    public /*out*/ readonly capacityProvider!: pulumi.Output<pulumiAws.ecs.CapacityProvider>;
    public /*out*/ readonly iamInstanceProfile!: pulumi.Output<pulumiAws.iam.InstanceProfile>;
    public /*out*/ readonly instanceRole!: pulumi.Output<pulumiAws.iam.Role>;
    public /*out*/ readonly instanceRolePolicyAttachments!: pulumi.Output<pulumiAws.iam.RolePolicyAttachment[]>;
    public /*out*/ readonly launchTemplate!: pulumi.Output<pulumiAws.ec2.LaunchTemplate>;

    /**
     * Create a NodeGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeGroupArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["maxCount"] = args ? args.maxCount : undefined;
            resourceInputs["minCount"] = args ? args.minCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["autoscalingGroup"] = undefined /*out*/;
            resourceInputs["capacityProvider"] = undefined /*out*/;
            resourceInputs["iamInstanceProfile"] = undefined /*out*/;
            resourceInputs["instanceRole"] = undefined /*out*/;
            resourceInputs["instanceRolePolicyAttachments"] = undefined /*out*/;
            resourceInputs["launchTemplate"] = undefined /*out*/;
        } else {
            resourceInputs["autoscalingGroup"] = undefined /*out*/;
            resourceInputs["capacityProvider"] = undefined /*out*/;
            resourceInputs["iamInstanceProfile"] = undefined /*out*/;
            resourceInputs["instanceRole"] = undefined /*out*/;
            resourceInputs["instanceRolePolicyAttachments"] = undefined /*out*/;
            resourceInputs["launchTemplate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NodeGroup.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a NodeGroup resource.
 */
export interface NodeGroupArgs {
    /**
     * The ECS cluster name.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The aws instance type to use for the nodes. Defaults to "t3.medium".
     */
    instanceType?: pulumi.Input<string>;
    /**
     * The maxium number of nodes running in the node group. Defaults to 2.
     */
    maxCount?: pulumi.Input<number>;
    /**
     * The minimum number of nodes running in the node group. Defaults to 1.
     */
    minCount?: pulumi.Input<number>;
    /**
     * The name that identies the resource.
     */
    name: pulumi.Input<string>;
    /**
     * The list of subnets ids where the nodes will be deployed.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
}
