// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

import * as pulumiAws from "@pulumi/aws";

import {NodeGroup} from "../kubernetes";

/**
 * Cluster is a component that deploy the Cluster application in the cluster.
 */
export class Cluster extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'cloud-toolkit-aws:containers:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    public /*out*/ readonly ecsCapacityProviders!: pulumi.Output<pulumiAws.ecs.ClusterCapacityProviders>;
    public /*out*/ readonly ecsCluster!: pulumi.Output<pulumiAws.ecs.Cluster>;
    public readonly nodeGroups!: pulumi.Output<NodeGroup[]>;
    public /*out*/ readonly serviceRole!: pulumi.Output<pulumiAws.iam.Role>;
    public /*out*/ readonly serviceRolePolicyAttachments!: pulumi.Output<pulumiAws.iam.RolePolicyAttachment[]>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ClusterArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["nodeGroups"] = args ? args.nodeGroups : undefined;
            resourceInputs["ecsCapacityProviders"] = undefined /*out*/;
            resourceInputs["ecsCluster"] = undefined /*out*/;
            resourceInputs["serviceRole"] = undefined /*out*/;
            resourceInputs["serviceRolePolicyAttachments"] = undefined /*out*/;
        } else {
            resourceInputs["ecsCapacityProviders"] = undefined /*out*/;
            resourceInputs["ecsCluster"] = undefined /*out*/;
            resourceInputs["nodeGroups"] = undefined /*out*/;
            resourceInputs["serviceRole"] = undefined /*out*/;
            resourceInputs["serviceRolePolicyAttachments"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The NodeGroups to be assigned to this cluster.
     */
    nodeGroups?: pulumi.Input<pulumi.Input<inputs.containers.ContainersClusterNodeGroupArgsArgs>[]>;
}
